// Generated by CoffeeScript 1.6.3
(function() {
  var Measurements, Person, Result, Results, person, results, _ref, _ref1, _ref2, _ref3,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Person = (function(_super) {
    __extends(Person, _super);

    function Person() {
      _ref = Person.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Person.prototype.defaults = {
      units: 'imperial',
      bmi: null
    };

    Person.prototype.unitMapping = {
      height1: {
        metric: 'm',
        imperial: 'ft',
        conversionFactor: 3.28084
      },
      height2: {
        metric: 'cm',
        imperial: 'in',
        conversionFactor: 0.393701
      },
      weight: {
        metric: 'kg',
        imperial: 'lbs',
        conversionFactor: 2.20462
      }
    };

    Person.prototype.initialize = function() {
      this.on('change:height1 change:height2', this.calcHeight);
      this.on('change:weight', this.calcWeight);
      this.on('change:metricWeight change:height', this.calcBMI);
      this.on('change:bmi change:age change:sex', this.calcBF);
      this.on('change:units', this.adjustUnits);
      this.on('change:weight change:bf', this.calcLBM);
      this.on('change:lbm', this.calcBMR);
      this.adjustUnits(this.get('units'));
      return this.recalc();
    };

    Person.prototype.recalc = function() {
      this.calcHeight();
      return this.calcWeight();
    };

    Person.prototype.adjustUnits = function() {
      var attr, factor, units, val, _ref1;
      units = this.get('units');
      _ref1 = this.unitMapping;
      for (attr in _ref1) {
        val = _ref1[attr];
        this.set("" + attr + "_label", val[units]);
        if (this.get(attr) != null) {
          factor = units === 'metric' ? 1 / val.conversionFactor : val.conversionFactor;
          this.set(attr, this.get(attr) * factor);
        }
      }
      return this.recalc();
    };

    Person.prototype.calcWeight = function() {
      return this.set('metricWeight', this.get('units') === 'metric' ? this.get('weight') : this.get('weight') * 0.453592);
    };

    Person.prototype.calcHeight = function() {
      var cm, ft, height, inches, m;
      if (this.get('height1') == null) {
        return;
      }
      if (this.get('units') === 'metric') {
        cm = this.get('height2');
        m = this.get('height1');
        height = cm ? ((+m * 100) + +cm) / 100 : m;
      } else {
        ft = this.get('height1');
        inches = this.get('height2');
        height = ((+ft * 12) + +(inches || 0)) / 39.370;
      }
      return this.set('height', height);
    };

    Person.prototype.calcBMI = function() {
      var bmi, bmiLabel;
      if (!((this.get('metricWeight') != null) && (this.get('height') != null))) {
        return null;
      }
      bmi = (this.get('metricWeight') / (this.get('height') * this.get('height'))).toFixed(2);
      this.set('bmi', bmi);
      bmiLabel = (function() {
        switch (false) {
          case !(bmi < 15):
            return 'Very severely underweight';
          case !(bmi < 16):
            return 'Severely underweight';
          case !(bmi < 18.5):
            return 'Underweight';
          case !(bmi < 25):
            return 'Normal (healthy weight)';
          case !(bmi < 30):
            return 'Overweight';
          case !(bmi < 35):
            return 'Obese Class I (Moderately obese)';
          case !(bmi < 40):
            return 'Obese Class II (Severely obese)';
          default:
            return 'Obese Class III (Very severely obese';
        }
      })();
      return this.set('bmiDisplay', "" + bmi + " (" + bmiLabel + ")");
    };

    Person.prototype.calcBF = function() {
      var bf, sexFactor;
      if (!(this.get('bmi') && this.get('age') && this.get('sex'))) {
        return;
      }
      sexFactor = this.get('sex') === 'male' ? 1 : 0;
      bf = ((1.2 * +this.get('bmi')) + (0.23 * this.get('age')) - (10.8 * sexFactor) - 5.4).toFixed(2);
      this.set('bf', bf);
      return this.set('bfDisplay', "" + bf + "%");
    };

    Person.prototype.calcLBM = function() {
      var lbm;
      if (!(this.get('weight') && this.get('bf'))) {
        return;
      }
      lbm = (this.get('weight') - this.get('weight') * (this.get('bf') / 100)).toFixed(2);
      this.set('lbm', lbm);
      return this.set('lbmDisplay', "" + lbm + " " + this.unitMapping.weight[this.get('units')]);
    };

    Person.prototype.calcBMR = function() {
      var bmr, lbm;
      if (!this.get('lbm')) {
        return;
      }
      lbm = this.get('units') === 'metric' ? this.get('lbm') : this.get('lbm') * 0.453592;
      bmr = Math.round(500 + 22 * lbm);
      this.set('bmr', bmr);
      return this.set('bmrDisplay', "" + bmr + " calories");
    };

    return Person;

  })(Backbone.Model);

  Measurements = (function(_super) {
    __extends(Measurements, _super);

    function Measurements() {
      _ref1 = Measurements.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    Measurements.prototype.initialize = function() {
      return this.render();
    };

    Measurements.prototype.render = function() {
      return (new Backbone.ModelBinder).bind(this.model, this.el);
    };

    return Measurements;

  })(Backbone.View);

  results = [
    {
      id: "bmi",
      label: "BMI",
      requiredMeasurements: ["height", "weight"]
    }, {
      id: "bf",
      label: "Estimated Body Fat",
      requiredMeasurements: ["height", "weight", "age", "sex"],
      notes: "Estimate based on the Deurenberg formula."
    }, {
      id: "lbm",
      label: "Lean Body Mass",
      requiredMeasurements: ["height", "weight", "age", "sex"]
    }, {
      id: "bmr",
      label: "Basal Metabolic Rate",
      requiredMeasurements: ["height", "weight", "age", "sex"],
      notes: "Based on the Cunningham formula."
    }
  ];

  Result = (function(_super) {
    __extends(Result, _super);

    function Result() {
      _ref2 = Result.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    Result.prototype.template = '\
    <div class="result">\
      <label>{{label}}</label>\
      {{#value}}<span>{{value}}</span>{{/value}}\
      {{^value}}<p class="required-measurements">[Enter {{requiredMeasurements}}]</p>{{/value}}\
      <p class="notes">{{notes}}</p>\
    </div>\
  ';

    Result.prototype.initialize = function(params) {
      var _this = this;
      this.model.on('change', function() {
        return _this.render();
      });
      this.params = params;
      return this.render();
    };

    Result.prototype.templateData = function() {
      var data;
      data = _.clone(this.params);
      data.value = this.model.get("" + this.id + "Display");
      data.requiredMeasurements = _.difference(this.params.requiredMeasurements, _.keys(this.model.attributes)).join(', ');
      return data;
    };

    Result.prototype.render = function() {
      return this.$el.html(Mustache.render(this.template, this.templateData()));
    };

    return Result;

  })(Backbone.View);

  Results = (function(_super) {
    __extends(Results, _super);

    function Results() {
      _ref3 = Results.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    Results.prototype.initialize = function() {
      return this.render();
    };

    Results.prototype.render = function() {
      var result, subview, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = results.length; _i < _len; _i++) {
        result = results[_i];
        subview = new Result(_.extend(result, {
          model: this.model
        }));
        _results.push(this.$el.append(subview.$el));
      }
      return _results;
    };

    return Results;

  })(Backbone.View);

  person = new Person;

  $(document).ready(function() {
    new Measurements({
      el: 'form',
      model: person
    });
    return new Results({
      el: '#results',
      model: person
    });
  });

}).call(this);
